<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:images="assets.images.*"
				dataChange="init(event)"
				autoDrawBackground="false" minWidth="800" width="100%">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
		/**
		 * Initialization performs the following actions:
		 *  - check to see if the Fleur de Lis should appear
		 *  - format the serving date
		 *  - assign the <s:Image> a source, if there is one, so that a broken image icon isn't shown for
		 *    a blank image source
		 *  - if there is an image for the <s:Image> component, then add an event listener for when the
		 *    image has loaded, otherwise dispatch a load complete event to the containing list 
		 *  - format the pricing and suggested serving sizes
		*/
			 
			private function init(e:FlexEvent):void {
			//Should a Fleur de Lis appear?
				if (data.showIcon == "0") {
					bullet.visible = false;
					bullet.width = 0
				} else {
					bullet.visible = true;
					bullet.width = NaN;
				}
				
			//Format the serving date
				serving.text = dateFormatter.format(data.serving * 1000);
				
			//Assign the <s:Image> a source
				if (data.imageURL != null && data.imageURL != "") {
					image.source = data.imageURL;
					image.addEventListener(Event.COMPLETE, imageLoadCompleteHandler);
				} else {
					image.source = null; //Wipe out the old image
					this.imageLoadCompleteHandler(new Event("complete")); //Fake fire ;)
				}
				
			//Format the pricing and suggested serving sizes
				var prices:Object = JSON.parse(data.price);
				var returnString:String = "";
				
				/**
				 * We can navigate the above object like a multi-dimensional array:
				 *  - first object within the array is the suggested serving size
				 *  - second object within the array is the price
				*/
				
				for (var i:int = 0; i <= prices.length - 1; i++) {
					returnString += data.type;
					
					if (prices[i][0] != "0") {
						returnString += " for " + prices[i][0] + " - " + priceFormatter.format(prices[i][1]);
					} else {
						returnString += " - " + priceFormatter.format(prices[i][1]);
					}
					
					if (i != prices.length - 1) {
						returnString += "    ";
					}
				}
				
				pricing.text = returnString;
			}
			
		//Share with the parent <s:List> when the <s:Image> has been loaded
			private function imageLoadCompleteHandler(e:Event):void {
				if (image.hasEventListener(Event.COMPLETE)) {
					image.removeEventListener(Event.COMPLETE, imageLoadCompleteHandler);
				}
				
				dispatchEvent(new Event("imageLoadComplete", true));
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
	<!-- Within the DateTimeFormatter &#13; are new lines, and data.type is the type of meal from the database -->
		<s:CurrencyFormatter currencySymbol="$" fractionalDigits="0" id="priceFormatter" trailingZeros="false"
							 useCurrencySymbol="true" useGrouping="true"/>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="EEEE &#13;'{data.type}' &#13;M-d-yy"/>
	</fx:Declarations>
	
<!-- Include the required stylesheet -->
	<fx:Style source="../../assets/styles/pages/EntreesStyles.css"/>
	
<!-- Display the header of the menu item including the name and serving date -->
	<s:Label id="serving" left="5" styleName="serving" top="7"/>
	
	<s:HGroup left="{width * 0.1}" verticalAlign="top">
		<images:FleurDeLis id="bullet"/>
		<s:Label id="title" styleName="name" text="{data.name}"/>
	</s:HGroup>
	
	<!-- Display the description and associated image (if any) of the entree item -->
	<s:Group id="detailsContainer" width="100%">
		<s:Image id="image" left="{(width * 0.1) + 35}" maxWidth="300" top="{title.height + 15}"/>
		
		<s:VGroup gap="15" left="{image.x + image.width + 15}" right="0" top="{title.height + 15}">
			<s:Label id="description" styleName="description" text="{data.description}" width="100%"/>
			<s:Label id="pricing" styleName="price" textAlign="center" width="100%"/>
		</s:VGroup>
	</s:Group>
</s:ItemRenderer>