<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:images="assets.images.*"
				autoDrawBackground="false" minWidth="800" width="100%"
				dataChange="init(event)">
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.events.FlexEvent;
			
		/**
		 * Initialization performs the following actions:
		 *  - check to see if the Fleur de Lis should appear
		 *  - adds a ":" after the name, if a tagline exists
		 *  - assign the <s:Image> a source, if there is one, so that a broken image icon isn't shown for
		 *    a blank image source
		 *  - if there is an image for the <s:Image> component, then add an event listener for when the
		 *    image has loaded, otherwise dispatch a load complete event to the containing list 
		 *  - either format the price using the CurrencyFormatter class, or construct a list of variations
		 *    to show various prices for differ sizes of menu items
		*/
			private function init(e:Event):void {
			//Should a Fleur de Lis appear?
				if (data.showIcon == "0") {
					bullet.visible = false;
					bullet.width = 0
				} else {
					bullet.visible = true;
					bullet.width = NaN;
				}
				
			//Add a ":" after the name if a tagline exists
				if (data.tagline != null && data.tagline != "") {
					title.text += " : ";
				}
				
			//Assign the <s:Image> a source
			//Add an event listener or dispatch an event
				if (data.imageURL != null && data.imageURL != "") {
					image.source = data.imageURL;
					image.addEventListener(Event.COMPLETE, imageLoadCompleteHandler);
				} else {
					image.source = null; //Wipe out the old image
					this.imageLoadCompleteHandler(new Event("complete")); //Fake fire ;)
				}				
				
			//Format the price or price variations
				if (data.variations == null || (data.variations != null && data.variations == "")) {
					price.text = priceFormatter.format(data.price);
					
					if (data.perUnit != null && data.perUnit != "") {
						price.text += " " + data.perUnit;
					}
				} else {
					var variations:Object = JSON.parse(data.variations);
					var returnString:String = "";
					
					/**
					 * We can navigate the above object like a multi-dimensional array:
					 *  - first object within the array is the price
					 *  - second object within the array is the size
					 *  - third object within the array is the suggested serving audience
				    */
					
					for (var i:int = 0; i <= variations.length - 1; i++) {
						returnString += priceFormatter.format(variations[i][0]) + " " + variations[i][1] +
										"<br><font size=\"12\">" + variations[i][2] + "</font><br>";
					}
					
					this.price.textFlow = TextConverter.importToFlow(returnString, TextConverter.TEXT_FIELD_HTML_FORMAT);
				}
			}
			
		//Share with the parent <s:List> when the <s:Image> has been loaded
			private function imageLoadCompleteHandler(e:Event):void {
				if (image.hasEventListener(Event.COMPLETE)) {
					image.removeEventListener(Event.COMPLETE, imageLoadCompleteHandler);
				}
				
				dispatchEvent(new Event("imageLoadComplete", true));
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="imageLoaded", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:CurrencyFormatter currencySymbol="$ " fractionalDigits="0" id="priceFormatter" trailingZeros="false"
							 useCurrencySymbol="true" useGrouping="true"/>
	</fx:Declarations>
	
<!-- Include the required stylesheet -->
	<fx:Style source="../../assets/styles/pages/FoodMenuStyles.css"/>
	
<!-- Display the header of the menu item including the name, price, tagline, and Fleur de Lis as the "bullet" item -->
	<s:RichText id="price" left="5" styleName="price" top="7"/>
	
	<s:HGroup left="{width * 0.1}" verticalAlign="top">
		<images:FleurDeLis id="bullet"/>
		<s:Label id="title" styleName="name" text="{data.name}"/>
		<s:Label height="24" id="tagline" styleName="tag" text="{data.tagline}" verticalAlign="bottom"/>
	</s:HGroup>
	
<!-- Display the description and associated image (if any) of the menu item -->
	<s:Group id="detailsContainer" width="100%">
		<s:Image id="image" left="{(width * 0.1) + 35}" maxWidth="300" top="{tagline.height + 15}"/>
		<s:Label id="description" left="{image.x + image.width + 15}" right="0" styleName="description"
				 text="{data.description}" top="{tagline.height + 15}"/>
	</s:Group>
</s:ItemRenderer>