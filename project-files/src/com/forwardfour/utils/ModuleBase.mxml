<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 preinitialize="configure(event)"
		 height="0" visible="false">
	
	<fx:Script>
		<![CDATA[
			import com.forwardfour.Config;
			import com.forwardfour.events.ComponentStateEvent;
			import com.forwardfour.events.NetworkEvent;
			import com.forwardfour.events.TransitionEvent;
			import com.greensock.TweenMax;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			
		//Globalize a reference to the main application, so that the instantiated Config class can be accessed
			private var main:Main;
			
		//Globalize a reference to the loaded data
			[Bindable]
			protected var data:Object;
			
		//Hold the data from the server but do not share it with the child component... yet
			private var delayedData:Object;
			
		//Set whether this component should transition into view when the requested data has been loaded
			private var transitionOnComplete:Boolean;
			
		//Set whether the data from the server should be shared immediately with the child component
			private var delaySharingDataUntilTransitionIn:Boolean;
			
		//Use the configuration class to set whether or not the Flex busy cursor should show during network activity
			private function configure(e:FlexEvent):void {
				this.main = Main(FlexGlobals.topLevelApplication);
				
				this.dataService.showBusyCursor = this.main.config.showFlexBusyCursor;
			}
			
		//Load the requested data from the server
			public function load(URL:String, transitionOnComplete:Boolean = false,
								 delaySharingDataUntilTransitionIn:Boolean = false):void {
				this.dataService.url = URL;
				this.dataServiceResponder.token = this.dataService.send();
				
				this.transitionOnComplete = transitionOnComplete;
				this.delaySharingDataUntilTransitionIn = delaySharingDataUntilTransitionIn;
			}
			
		//Share the loaded data with the component, dispatch a data fetched event, and see if the component should be transitioned
			private function dataResultHandler(e:ResultEvent):void {
			/**
			 * The point of the below conditional statements are two-fold:
			 * 
			 * POINT ONE -----------------------
			 * 
			 * If no data is recieved from the server, then the conditions fill in the data with 
			 * empty objects so that runtime errors aren't encountered when Flash tries to parse
			 * empty data.
			 * 
			 * POINT TWO -----------------------
			 * 
			 * Issue resolved: Type Coercion failed: cannot convert mx.utils::ObjectProxy to mx.collections.IList.
			 * 
			 * WHY: If XML returns mode than childnodes it was working fine but if xml returns just one node then
			 *      ArrayCollection starts throwing error.
			 * URL: http://wadhwakanu.wordpress.com/2010/06/21/type-coercion-failed-cannot-convert-mx-utilsobjectproxy-to-
			 *      mx-collections-arraycollection/comment-page-1/
			 * 
			 * The second "if" condition checks to see if there is a <root><item /></root> structure
			 * in the loaded XML file. All modules which have the potential for multiple sets of data
			 * will have a heiarchy like this:
			 * 
			 *     <root>
			 *       <item>
			 *         ... XML items ...
			 *       </item>
			 * 
			 *       <item>
			 *         ... XML items ...
			 *       </item>
			 *     </root>
			 * 
			 * If there is only one set of data that is expected, the strcuture will display like this:
			 * 
			 *     <root>
			 *       ... XML items ...
			 *     </root>
			 * 
			 * If there is the possibility for multiple sets of data, then the "Only one result"
			 * condition will ensure that the recieved data is properly casted.
			*/
				
				var fetchedData:Object;
				
				if (e.result.root) {
					if (e.result.root.item && e.result.root.item != null) {
					//2 or more results
						if (e.result.root.item is ArrayCollection) {
							fetchedData = e.result;
					//Only one result
						} else {
							fetchedData = new Object();
							fetchedData.root = new Object();
							fetchedData.root.item = new ArrayCollection(ArrayUtil.toArray(e.result.root.item));
						}
					} else {
						fetchedData = e.result;
					}
				} else {
					fetchedData = new Object();
					fetchedData.root = new Object();
				}
				
			//Share the data with the component
				if (!this.delaySharingDataUntilTransitionIn) {
					this.data = fetchedData;
				} else {
					this.delayedData = fetchedData;
				}
				
			//Dispatch the event
				var eventData:NetworkEvent = new NetworkEvent("loadComplete");
				eventData.data = e.result;
				eventData.headers = e.headers;
				eventData.statusCode = e.statusCode;
				eventData.triggeredObject = this;
				eventData.URL = this.dataService.url;
				
				super.dispatchEvent(eventData);
				
			//Should the component be transitioned into place?
				if (this.transitionOnComplete) {
					this.transitionIn();
				}
			}
			
		//Handle data loading errors
			private function dataFaultHandler(e:FaultEvent):void {
				Alert.show("Data for the ModuleBase could not be fetched.\n\nFault code: " +
							e.fault.faultCode + "\nFault details: " + e.fault.faultDetail, e.fault.faultString);
			}
			
		//Restore the visual appearance of the component, and transition it into place
			public function transitionIn():void {
			//Restore the component
				this.restore();
				
			//Share the data with the child component
				if (this.delaySharingDataUntilTransitionIn) {
					this.data = this.delayedData;
					this.delayedData = null;
				}
				
			//Transition it into place, if the component has been added to the stage
				TweenMax.to(this, (this.main.config.transitionDuration / 1000) / 2, {
					alpha : 1,
					onComplete : transitionInCompleteHandler,
					y : "-=" + this.main.config.transitionLength
				});
			}
			
		//Dispatch an event when transitioning in is complete, and set an explict height
			private function transitionInCompleteHandler():void {
			//Dispatch the event
				var eventData:TransitionEvent = new TransitionEvent("transitionInComplete");
				eventData.transitionDuration = (this.main.config.transitionDuration / 1000) / 2;
				eventData.transitionType = TransitionEvent.TRANSITION_IN;
				eventData.triggeredObject = this;
				
				super.dispatchEvent(eventData);
				
			//Set the explicit height
				this.restore();
			}
			
		//Transition this component out of place
			public function transitionOut(destroyOnComplete:Boolean = true):void {
				TweenMax.to(this, (this.main.config.transitionDuration / 1000) / 2, {
					alpha : 0,
					onComplete : transitionOutCompleteHandler,
					onCompleteParams : new Array(destroyOnComplete),
					y : "+=" + this.main.config.transitionLength
				});
			}
			
		//Destroy this component's data, and dispatch an event when transitioning out is complete
			private function transitionOutCompleteHandler(destroyOnComplete:Boolean):void {
			//Should this components data and visual appearance be destroyed?
				if (destroyOnComplete) {
					this.destroy();
				}
				
			//Dispatch the event
				var eventData:TransitionEvent = new TransitionEvent("transitionOutComplete");
				eventData.transitionDuration = (this.main.config.transitionDuration / 1000) / 2;
				eventData.transitionType = TransitionEvent.TRANSITION_OUT;
				eventData.triggeredObject = this;
				
				super.dispatchEvent(eventData);
			}
			
		//Destroy this component's data and visual appearence, and dispatch a destroyed event
			public function destroy():void {
			//Destroy the data the sub-class's components are bound to
				this.data = null;
				
			//Destroy the visual appearance
				this.height = 0;
				this.visible = false;
				
			//Dispatch the destroyed event
				super.dispatchEvent(new ComponentStateEvent("componentDestroyed"));
			}
			
		//Restore this component's visual appearance, and dispatch the restored event. The data is gone :(
			public function restore():void {
			//Restore the component
				this.height = NaN;
				this.invalidateSize();
				this.height = super.measuredHeight;
				this.visible = true;
				
			//Dispatch the restored event
				super.dispatchEvent(new ComponentStateEvent("componentRestored"));
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder fault="dataFaultHandler(event)" id="dataServiceResponder" result="dataResultHandler(event)"/>
		<s:HTTPService id="dataService"/>
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="componentDestroyed", type="com.forwardfour.events.ComponentStateEvent")]
		[Event(name="componentRestored", type="com.forwardfour.events.ComponentStateEvent")]
		[Event(name="loadComplete", type="com.forwardfour.events.NetworkEvent")]
		[Event(name="transitionInComplete", type="com.forwardfour.events.TransitionEvent")]
		[Event(name="transitionOutComplete", type="com.forwardfour.events.TransitionEvent")]
	</fx:Metadata>
</s:Group>