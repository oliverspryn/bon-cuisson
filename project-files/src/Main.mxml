<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:header="components.header.*"
			   backgroundColor="0x141414" minHeight="600" minWidth="955" skinClass="skins.Theme">
	<fx:Script>
		<![CDATA[
			import com.asual.swfaddress.SWFAddress;
			import com.asual.swfaddress.SWFAddressEvent;
			import com.forwardfour.Config;
			import com.forwardfour.events.MenuEvent;
			import com.forwardfour.events.NetworkEvent;
			import com.forwardfour.utils.ModuleBase;
			import com.forwardfour.valueObjects.NavigationItemData;
			
			import components.pages.FoodMenu;
			import components.pages.Home;
			import components.pages.Lunches;
			import components.pages.Reviews;
			
		//Globalize a reference to the page content
			private var pageObject:ModuleBase = null;
			
		//Globalize a reference to the page menu index
			private var pageIndex:int;
			
		//Globalize a reference to the old page content
			private var oldPageObject:ModuleBase = null;
			
		//Instantiate the configuration class
			public var config:Config = new Config();
			
		/**
		 * Initialization
		 * -------------------------------
		*/
			
		//Initialize SWFAddress and grab the page listed from the URL
			private function init(e:Event):void {
				SWFAddress.addEventListener(SWFAddressEvent.CHANGE, URLNavigateToPageHandler);
			}
			
		//Get the hijacked URL of the current page
			private function get URL():String {
				var URL:String = SWFAddress.getValue();
				
				if (URL == "" || URL == "/") {
					return "";
				} else {
					return URL.substring(1);
				}
			}
			
		/**
		 * Navigation handlers
		 * -------------------------------
		*/
			
		//Go to a specific page when a menu item has been clicked
			private function menuNavigateToPageHandler(e:MenuEvent):void {
				this.navigateToPage(menu.getInfoForItemByIndex());
			}
			
		//Request a page when the URL has changed
			private function URLNavigateToPageHandler(e:SWFAddressEvent):void {
				this.navigateToPage(menu.getInfoForItemByURL(this.URL));
			}
			
		//Process the page navigation request
			private function navigateToPage(pageData:NavigationItemData):void {
				var pageType:String = pageData.pageType;
				this.oldPageObject = this.pageObject;
				this.pageIndex = pageData.menuIndex;
				
				switch(pageType) {
					case "home" : 
						this.pageObject = new Home();
						this.pageObject.alpha = 0;
						this.pageObject.y = 80;
						this.pageObject.load("system/server/services/home.php");
						this.pageObject.addEventListener("loadComplete", transitionPages);
						this.addElement(this.pageObject);
						break;
					
					case "menu" : 
						this.pageObject = new FoodMenu();
						this.pageObject.alpha = 0;
						this.pageObject.y = 80;
						this.pageObject.load("system/server/services/food-menu.php?type=" + pageData.category);
						this.pageObject.addEventListener("loadComplete", transitionPages);
						this.addElement(this.pageObject);
						break;
						
					case "lunch" : 
						this.pageObject = new Lunches();
						this.pageObject.alpha = 0;
						this.pageObject.y = 80;
						this.pageObject.load("system/server/services/lunch.php");
						this.pageObject.addEventListener("loadComplete", transitionPages);
						this.addElement(this.pageObject);
						break;
					
					case "reviews" : 
						this.pageObject = new Reviews();
						this.pageObject.alpha = 0;
						this.pageObject.y = 80;
						this.pageObject.load("system/server/services/reviews.php");
						this.pageObject.addEventListener("loadComplete", transitionPages);
						this.addElement(this.pageObject);
						break;
					
					default : 
						break;
				}
			}
			
		//Transition the old page away
			private function transitionPages(e:NetworkEvent):void {
				this.pageObject.removeEventListener("loadComplete", transitionPages);
				
				if (this.oldPageObject != null) {
					this.oldPageObject.transitionOut();
					this.oldPageObject.addEventListener("transitionOutComplete", finishTransition);
				} else {
					this.finishTransition(new Event("transitionOutComplete"))
				}
			}
			
		//...and the new one into view. Also update the hijacked URL, title, and selected menu item
			private function finishTransition(e:Event):void {
				if (this.oldPageObject != null) {
					removeElement(this.oldPageObject);
					
					this.oldPageObject.removeEventListener("transitionOutComplete", finishTransition);
					this.oldPageObject = null;
				}
				
				SWFAddress.removeEventListener(SWFAddressEvent.CHANGE, URLNavigateToPageHandler);
				
				var info:NavigationItemData = menu.getInfoForItemByIndex(false, this.pageIndex);
				SWFAddress.setTitle(info.pageTitle);
				SWFAddress.setValue(info.pageURL);
				menu.selected = info.menuIndex;
				this.pageObject.transitionIn();
				
				SWFAddress.addEventListener(SWFAddressEvent.CHANGE, URLNavigateToPageHandler);
			}
			
		/**
		 * Public methods
		 * -------------------------------
		*/
			
		//Re-evaluate the size of the stage to re-size the master <s:Scroller>
			public function evalContents():void {
				this.pageObject.restore();
			}
		]]>
	</fx:Script>
	
<!-- Include the navigation menu -->
	<header:Menu id="menu" menuConstructed="init(event)" menuItemClicked="menuNavigateToPageHandler(event)" top="0"/>
	
<!-- We'll build the components in AS as we need them -->
</s:Application>