<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:pagesservice="services.pagesservice.*"
		 width="100%"
		 creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import com.asual.swfaddress.SWFAddress;
			import com.forwardfour.boncuisson.events.MenuEvent;
			import com.greensock.TweenMax;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import renderers.Navigation;
			
			import spark.events.IndexChangeEvent;
			
			import valueObjects.MenuVO;
			
		//The event that is dispatched during a menu item click
			public static const MENU_ITEM_CLICKED:String = "menuItemClicked";
			
		//A reference to the data that was fetched from the server
			[Bindable]
			private var data:Object;
			
		//A reference to the current page pointer arrow
			private var pointer:UIComponent = null;
			
		//Request the menu data from the server and hide the menu scrollbars
			private function init(e:Event):void {
			//Request the menu data
				dataServiceResponder.token = dataService.send();
				
			//Hide menu scrollbars
				list.scroller.setStyle("horizontalScrollPolicy", "off");
				list.scroller.setStyle("verticalScrollPolicy", "off");
			}
			
		//Share the loaded data with the component, and transition the menu into view
			private function dataResultHandler(e:ResultEvent):void {
				this.data = e.result.menu;
				this.slideOut();
			}
			
		//Handle data loading errors
			private function dataFaultHandler(e:FaultEvent):void {
				Alert.show("Data for the Menu could not be fetched.\n\nFault code: " +
							e.fault.faultCode + "\nFault details: " + e.fault.faultDetail, e.fault.faultString);
			}
			
		/**
		 * Perform the following actions to transitioning the menu into view
		 *  - [1] slide the out horizontally to full width
		 *  - [2] roll the menu down to full height
		 *  - [3] build the menu items (performed by each item renderer)
		 *  - [4] build the current page pointer arrow
		*/
			
			private function slideOut():void {
				TweenMax.to(this.background, 0.50, {
					onComplete : slideDown,
					width : stage.stageWidth
				});
			}
			
			private function slideDown():void {
				TweenMax.to(this.background, 0.50, {
					height : 40,
					onComplete : buildPointerDelay
				});
				
			//Anchor the backgroud of the menu to the left and right of the stage
				this.background.left = 0;
				this.background.right = 0;
			}
			
			private function buildPointerDelay():void {
				var delay:Number = 1250;                    //1.25 sec delay for the menu background to transition into place
				delay += this.data.item.length * 250;       //0.25 sec delay for each item appearing in the menu
				
				var timer:Timer = new Timer(delay, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, buildPointer);
				timer.start();
			}
			
			private function buildPointer(e:TimerEvent):void {
			//Pointer configuration
				var color:uint = 0xFFFFFF;
				var width:int = 10;
				
			//Building the pointer
				this.pointer = new UIComponent();
				this.pointer.alpha = 0;
				this.pointer.graphics.beginFill(color);
				this.pointer.graphics.moveTo(width / 2, 0);
				this.pointer.graphics.lineTo(width, width);
				this.pointer.graphics.lineTo(0, width);
				this.pointer.graphics.lineTo(width / 2, 0);
				this.pointer.graphics.endFill();
				this.pointer.x = (width * 0.1); //Placing it on the left of the menu
				this.pointer.y = 40 - width;
				this.addElement(this.pointer);
				
			//Place the arrow under the active menu item
				if (this.URL == "") {
					this.selected = 1;
				} else {
					var menuItems:Number = this.data.item.length - 1;
					
					for (var i:int = 0; i <= menuItems; i ++) {
						if (this.data.item[i].URL == this.URL) {
							this.selected = i + 1;
							break;
						}
					}
				}
			}
			
		//Get the x-axis position of the pointer if were placed at a given menu item
			private function getArrowPositionAtIndex(index:Number):Number {
				var width:int = 10; //Width of the pointer
				var selectedItem:IVisualElement = list.dataGroup.getElementAt(list.selectedIndex);
				var selectedItemX:Number = selectedItem.x;
				var selectedItemWidth:Number = selectedItem.width;
				var xPos:Number = (stage.stageWidth / 10) + selectedItemX + (selectedItemWidth / 2) - (width / 2);
				
				return xPos;
			}
			
		//Slide the arrow to a new menu item
			public function set selected(item:Number):void {
			//Don't do anything if the pointer has not be created
				if (this.pointer != null) {
					list.selectedIndex = item - 1;
					
					var xPos:Number = this.getArrowPositionAtIndex(list.selectedIndex);
					
					TweenMax.to(this.pointer, 1, {
						alpha : 1,
						x : xPos
					});
				}
			}
			
		//Let the application know that the user has selected a menu item
			private function navigateToPageHandler(e:IndexChangeEvent):void {
			//Collect the event data
				var event:MenuEvent = new MenuEvent(Menu.MENU_ITEM_CLICKED);
				event.menuIndex = list.selectedIndex;
				event.pageID = this.data.item[list.selectedIndex].id;
				event.pageURL = this.data.item[list.selectedIndex].URL;
				event.pageType = this.data.item[list.selectedIndex].type;
				
			//Dispatch the event
				super.dispatchEvent(event);
			}
			
		//Get the hijaxed URL of the current page
			private function get URL():String {
				var URL:String = SWFAddress.getValue();
				
				if (URL == "" || URL == "/") {
					return "";
				} else {
					return URL.substring(1);
				}
			}
		]]>
	</fx:Script>
	
<!-- Make a request to the server for each of the menu items -->
	<fx:Declarations>
		<s:CallResponder fault="dataFaultHandler(event)" id="dataServiceResponder" result="dataResultHandler(event)"/>
		<s:HTTPService id="dataService" url="services/menu.php"/>
	</fx:Declarations>
	
<!-- The background of the menu -->
	<s:Rect height="1" horizontalCenter="0" id="background" width="0">
		<s:fill>
			<s:SolidColor color="0x333333"/>
		</s:fill>
	</s:Rect>
	
<!-- The styled list which will act as the menu -->
	<s:List borderVisible="false" change="navigateToPageHandler(event)" contentBackgroundAlpha="0"
			dataProvider="{this.data.item}" id="list" itemRenderer="renderers.Navigation"
			left="{width * 0.1}" requireSelection="true" right="{width * 0.1}">
		<s:layout>
			<s:HorizontalLayout gap="30"/>
		</s:layout>
	</s:List>
</s:Group>
